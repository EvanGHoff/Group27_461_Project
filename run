@echo off

REM Log file
set LOG_FILE=run.log

REM Remove the log file if it exists
if exist "%LOG_FILE%" del "%LOG_FILE%"

REM Redirect both stdout and stderr to the log file
call :log > "%LOG_FILE%" 2>&1
goto :main

:log
REM Check if the URL file path exists
:check_url_file_path
if not exist "%1" (
    echo Please input install, test, or a correct file path
    exit /b 1
)

REM Main script
:main
if "%1" == "install" (
    echo Installing dependencies...
    npm init -y
    npm install typescript --save-dev
    npm install @types/node --save-dev
    npm install fs --save-dev
    npm install axios --save-dev
    npm install dotenv --save-dev
    npm install simple-git --save-dev
    echo Dependencies installed.
    exit /b 0
) else if "%1" == "test" (
    echo Running tests...
    set URL_FILE=test_cases.txt
  
    if not exist "%URL_FILE%" (
        echo Error: File '%URL_FILE%' does not exist.
        exit /b 1
    )

    REM Directory to store outputs
    set OUTPUT_DIR=test_outputs
    if not exist "%OUTPUT_DIR%" mkdir "%OUTPUT_DIR%"

    REM Initialize counters
    set /a TOTAL_TESTS=0
    set /a PASSED_TESTS=0

    REM Iterate through URLs in the file and run tests
    set /a INDEX=1
    for /f "usebackq delims=" %%A in ("%URL_FILE%") do (
        set URL=%%A
        set URL=!URL:~0,-1!

        echo Processing test case #%INDEX% with URL: !URL!

        REM Run the metrics.js code on the URL and capture the output
        node -e "require('./metrics.js').getRepoData('!URL!').then(data => { 
            const fs = require('fs');
            fs.writeFileSync('%OUTPUT_DIR%/output_!INDEX!.json', JSON.stringify(data, null, 2));
        }).catch(err => { 
            console.error('Error:', err); // Log the error using console.error
            const fs = require('fs');
            fs.writeFileSync('%OUTPUT_DIR%/output_!INDEX!.json', JSON.stringify({error: 'Access denied or other error'}, null, 2));
        });"

        REM Wait for the file to be written before proceeding to the next test case
        timeout /t 1 /nobreak >nul

        REM Check if the output file contains the expected results (e.g., a score field)
        findstr /c:"\"score\":" "%OUTPUT_DIR%/output_!INDEX!.json" >nul
        if !errorlevel! == 0 (
            for /f "tokens=2 delims=:" %%B in ('findstr /c:"\"score\":" "%OUTPUT_DIR%/output_!INDEX!.json"') do (
                set SCORE=%%B
                set SCORE=!SCORE:~1,-1!

                REM Check if SCORE is a valid number
                echo !SCORE! | findstr /r "^[0-9]*\.?[0-9]*$" >nul
                if !errorlevel! == 0 (
                    REM Check if the score is negative
                    if "!SCORE:~0,1!" == "-" (
                        echo Test case #%INDEX% failed (negative score). | tee -a "%LOG_FILE%"
                    ) else (
                        echo Test case #%INDEX% passed. | tee -a "%LOG_FILE%"
                        set /a PASSED_TESTS+=1
                    )
                ) else (
                    echo Test case #%INDEX% failed (invalid score value). | tee -a "%LOG_FILE%"
                )
            )
        ) else (
            echo Test case #%INDEX% failed (invalid metrics). | tee -a "%LOG_FILE%"
        )

        set /a TOTAL_TESTS+=1
        set /a INDEX+=1
    )

    REM Calculate coverage
    if %TOTAL_TESTS% gtr 0 (
        set /a COVERAGE=100 * PASSED_TESTS / TOTAL_TESTS
    ) else (
        set COVERAGE=0
    )

    REM Summary output
    echo Total: %TOTAL_TESTS% | tee -a "%LOG_FILE%"
    echo Passed: %PASSED_TESTS% | tee -a "%LOG_FILE%"
    echo Coverage: %COVERAGE%% | tee -a "%LOG_FILE%"
    echo %PASSED_TESTS%/%TOTAL_TESTS% test cases passed. %COVERAGE%% line coverage achieved. | tee -a "%LOG_FILE%"

    exit /b 0
) else (
    if "%1" == "" (
        echo Usage: %0 {install^|test^|url_file_path} | tee -a "%LOG_FILE%"
        exit /b 1
    )

    call :check_url_file_path "%1"
    
    REM Compile the TypeScript file
    npx tsc cli.ts
    if errorlevel 1 (
        echo TypeScript compilation failed. | tee -a "%LOG_FILE%"
        exit /b 1
    )

    if exist cloned_repo rmdir /s /q cloned_repo
    if exist output.json del output.json
    REM Run the compiled JS file with the given URL file path
    node cli.js "%1"
    if errorlevel 1 (
        echo Failed to execute cli.js. | tee -a "%LOG_FILE%"
        exit /b 1
    )

    if exist output.json (
        type output.json | tee -a "%LOG_FILE%"
    ) else (
        echo output.json not found. | tee -a "%LOG_FILE%"
        exit /b 1
    )

    exit /b 0
)
